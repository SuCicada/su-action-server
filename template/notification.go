package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _notification_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func notification_go() ([]byte, error) {
	return bindata_read(
		_notification_go,
		"notification.go",
	)
}

var _notification_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x0a\x2e\x49\x2c\x29\x2d\xb6\x52\xa8\xae\xd6\x2b\x06\x33\x6b\x6b\xb5\xb8\x9c\xf3\x73\x73\x33\x4b\x14\x72\x53\x8b\x8b\x13\xd3\x53\xc1\x92\xc9\x60\x21\x5f\x88\x48\x6d\x2d\x4c\x49\x69\x51\x0e\x92\x74\x68\x51\x4e\x6d\x2d\x97\x63\x72\x49\x66\x7e\x1e\x5c\x2a\x11\xcc\x85\x48\x01\x02\x00\x00\xff\xff\xb3\x06\x15\x1f\x6f\x00\x00\x00")

func notification_gohtml() ([]byte, error) {
	return bindata_read(
		_notification_gohtml,
		"notification.gohtml",
	)
}

var _template_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcf\x4a\x3b\x31\x10\xc7\xcf\x99\xa7\x98\x5f\x4e\x09\x94\xe4\xfe\x83\x1e\x14\xd4\x93\x52\xd0\x17\x88\xdb\x49\x0d\x26\xd9\x25\x99\xa5\x42\xd9\x77\x97\x34\xdb\x22\xd6\xdb\xce\xec\xf7\xcf\x27\x33\xb9\xe1\xd3\x1d\x08\x99\xd2\x14\x1d\x13\x40\x48\xd3\x58\x18\x15\x08\xe9\x13\x4b\x10\xf2\x83\x53\xb4\x17\x41\x5b\x54\x2e\x21\x1f\xaa\x04\x0d\xe0\xe7\x3c\xe0\x13\xf1\xdb\xfa\x5f\xed\x1d\x3b\x0c\x99\xa9\x78\x37\xd0\x69\xd1\xd8\xe5\x78\x02\x91\x5d\x22\xfc\xbf\x45\x99\x47\x0e\x3e\x0c\x8e\xc3\x98\xcd\x61\x6c\x0d\x12\x44\xff\xd8\x20\x95\xd2\x54\x77\xb5\x12\xab\xe6\xd1\x20\x82\x3f\xaf\xff\x6d\x31\x87\xd8\xb2\xc4\xe4\x72\x18\x14\x95\xa2\x41\x88\x42\x3c\x97\x8c\x52\x82\x58\x40\x70\x9a\x62\x4b\xb8\x40\x9b\xe7\xb9\xb2\xba\x4e\x2f\x74\xec\xb1\x66\xe7\x4a\x25\xd5\x01\x55\xaf\xd7\x5a\x03\x08\x6b\x5b\xc6\x15\xe5\x6a\x3d\x1b\x1e\x43\xa4\x7a\x91\x37\xed\x0d\x9c\xb5\xc2\x27\x36\xbb\x12\x32\xc7\xbc\x42\x5a\xfb\x13\xd3\xda\x05\x40\xbc\xcf\xde\xd3\xb9\x22\xd3\x71\x05\xa9\xe6\x7e\x0e\x71\x4f\xcd\xd3\x62\xb7\xd8\x58\xcc\xc3\x17\x0d\x33\x93\xea\x96\x0d\xb6\x43\xff\x79\x98\xdb\xe6\x5f\xe7\x59\xa7\x1e\x64\x5e\xfb\xeb\x35\x2c\xf0\x1d\x00\x00\xff\xff\x5f\x4f\x67\xf5\x0e\x02\x00\x00")

func template_go() ([]byte, error) {
	return bindata_read(
		_template_go,
		"template.go",
	)
}

var _template_test_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x6a\xc5\x30\x0c\x85\xe1\xd9\x7a\x0a\xa1\x29\x29\xe5\x3e\x40\xa0\x73\xa7\x42\x87\x74\x2a\x1d\x84\x91\x83\x69\xec\x04\xeb\x64\x0a\x79\xf7\xd2\xd6\xc3\x1d\xae\xd6\xef\xfc\xa0\x5d\xe3\xb7\x2e\xc6\xb0\xb2\xaf\x0a\x23\xca\x65\xdf\x1a\x78\xa0\x20\xa9\x40\x28\x08\xcc\x91\xeb\x22\x34\x12\xa5\xa3\x46\x9e\xcd\xf1\x6a\x98\x7b\x33\x80\x9f\xfa\xe6\x36\x8f\x7c\x52\x68\xe6\x3c\xbd\xf0\xfd\xa6\xe8\xfe\xe9\x68\xb9\x2e\x5f\xb9\xc2\x5a\xd2\x68\xe7\x75\x52\x08\xe2\x50\x1c\x2e\x13\xf7\x13\x3f\x62\x34\x77\x79\xfe\xd5\xb8\x95\x92\xf1\x66\xee\xba\x98\x4c\xfc\xf7\xce\x3d\x7d\xb4\xb5\xb7\xa2\x9e\xd4\xd3\x3f\x6a\x44\xde\xea\x43\xbc\x46\x0a\xa9\xe0\xf6\xde\x72\xc5\x5a\x87\x66\x3e\xd2\x45\x3f\x01\x00\x00\xff\xff\xf4\x3a\x74\xaa\x0c\x01\x00\x00")

func template_test_go() ([]byte, error) {
	return bindata_read(
		_template_test_go,
		"template_test.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"notification.go":     notification_go,
	"notification.gohtml": notification_gohtml,
	"template.go":         template_go,
	"template_test.go":    template_test_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"notification.go":     {notification_go, map[string]*_bintree_t{}},
	"notification.gohtml": {notification_gohtml, map[string]*_bintree_t{}},
	"template.go":         {template_go, map[string]*_bintree_t{}},
	"template_test.go":    {template_test_go, map[string]*_bintree_t{}},
}}
